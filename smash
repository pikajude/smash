#!/bin/bash

if ! hash netcat 2>/dev/null; then
  echo >&2 "netcat not found; you need netcat >= 0.7.1 to smash."
  exit 1
fi

if (( $# < 1 )); then
  echo >&2 "Usage: $0 client_file.sh"
  exit 1
fi

INTERRUPTED=0
CONTENT_TYPE=
STATUS_CODE=
DIR=$(dirname $0)
LOGFILE="$DIR/log.txt"

LISTEN_PORT=4445

trap 'INTERRUPTED=1' INT

launch () {
  while [[ "$INTERRUPTED" != "1" ]]; do
    if ! netcat -l -p $LISTEN_PORT -e "$0 __magic__ $1"; then
      if [[ "$INTERRUPTED" == "1" ]]; then
        echo "goodbye!"
        exit 0
      else
        echo >&2 "smash exited with a nonzero status: $? (possibly an internal server error)"
        exit 1
      fi
    fi
  done
}

hecho () {
  echo -n "$@"
  echo -ne "\r\n"
}

set_req_path () {
  path="$1"
  _PATH="${path%\?*}"
  _QSTR="${path#$_PATH}"
  if [[ "${_QSTR:0:1}" == "?" ]]; then
    _QSTR="${_QSTR:1}"
  fi
  if [[ -n "$_QSTR" ]]; then
    parse_qstr
  fi
}

parse_qstr () {
  _QUERY_ARGS=()
  args=(${_QSTR//&/ })
  for i in "${args[@]}"; do
    key="${i%%=*}"
    if [[ -z "$key" ]]; then
      continue
    fi
    val=$(cgi_unescape "${i#*=}")
    _QUERY_ARGS+=($key)
    _QUERY_ARGS+=("$val")
  done
}

binarify () {
  s="$1"
  bits=($(echo -n "$s" | hexdump -e '16/1 "%02u "'))
  case "${#bits[@]}" in
    1) case "${bits[0]}" in
         34) echo -n "&quot;" ;;
         38) echo -n "&amp;" ;;
         39) echo -n "&apos;" ;;
         60) echo -n "&lt;" ;;
         62) echo -n "&gt;" ;;
         *) echo -n "$s" ;;
       esac
       ;;
    2)
      let "res = ((${bits[0]} & 31) << 6) + (${bits[1]} & 63)"
      echo -n "&#$res;"
      ;;
    3)
      let "res = ((${bits[0]} & 15) << 12) + ((${bits[1]} & 63) << 6) + (${bits[2]} & 63)"
      echo -n "&#$res;"
      ;;
    4)
      let "res = ((${bits[0]} & 7) << 18) + ((${bits[1]} & 63) << 12) + ((${bits[2]} & 63) << 6) + (${bits[3]} & 63)"
      echo -n "&#$res;"
      ;;
  esac
}

html_encode () {
  str="$1"
  len="${#str}"
  out=
  for (( i = 0; i < ${len}; i++ )); do
    ch="${str:$i:1}"
    out="${out}$(binarify "$ch")"
  done
  echo -n "$out"
}

cgi_unescape () {
  str="$1"
  len="${#str}"
  out=
  if ! echo "$str" | grep -q '%'; then
    echo -n "$str"
  else
    for (( i = 0; i < ${len}; i++ )); do
      ch="${str:$i:1}"
      if [[ "$ch" == "%" ]]; then
        unescaped="$(echo -ne "\\x${str:$(expr $i + 1):2}")"
        if [[ "${#unescaped}" == "4" ]]; then
          out="${out}$ch"
        else
          out="${out}${unescaped}"
          i="$(expr $i + 2)"
        fi
      else
        out="${out}$ch"
      fi
    done
    echo -n "$out"
  fi
}

query_arg () {
  arg="$1"
  len=${#_QUERY_ARGS[@]}
  for (( i = 0; i < ${len}; i += 2 )); do
    if [[ "${_QUERY_ARGS[$i]}" == "$arg" ]]; then
      echo "${_QUERY_ARGS[$(expr $i + 1)]}"
    fi
  done
}

parse_headers () {
  read header
  IFS=' ' read -ra REQ <<< "$header"
  _METHOD="${REQ[0]}"
  set_req_path "${REQ[1]}"
  _VERSION="${REQ[2]#HTTP/}"
  _VERSION="${_VERSION:0:3}"
  _HEADERS=()
  while true; do
    read header
    if [[ "${#header}" == "1" ]]; then
      break
    fi
    len=$(expr "${#header}" - 1)
    header=${header:0:$len}
    _HEADERS+=("$header")
  done
}

header () {
  key="$1"
  for v in "${_HEADERS[@]}"; do
    if echo "$v" | grep -q "^${key}: "; then
      echo "${v#${key}: }"
      break
    fi
  done
}

status_to_text () {
  case $STATUS_CODE in
    200)
      echo -n "OK"
      ;;
    404)
      echo -n "Not Found"
      ;;
    500)
      echo -n "Internal Server Error"
      ;;
    *)
      echo >&2 "Unhandled status code $STATUS_CODE"
      exit 1
      ;;
  esac
}

content_type () {
  CONTENT_TYPE=$1
}

status_code () {
  STATUS_CODE=$1
}

send_headers () {
  resp="$1"
  len="$(echo -n "$resp" | wc -c | tr -d ' ')"
  hecho "HTTP/1.1 $STATUS_CODE $(status_to_text)"
  hecho "Date: $(date)"
  hecho "Content-Type: $CONTENT_TYPE"
  hecho "Content-Length: $len"
  hecho ""
}

send_response () {
  resp="$(echo "$1" | sed $(echo -e "s/\$/\r/") 2>err.txt)"
  if (( $? != 0 )); then
    status_code 500
    resp="<h1>Internal Server Error</h1><p>$(<err.txt)</p>"
  fi
  rm -f err.txt
  send_headers "$resp"
  hecho "$resp"
  echo "[$(date)] \"${_METHOD} ${_PATH} HTTP/${_VERSION}\" ${STATUS_CODE} ${#resp} \"http://$(header "Host")$_PATH\" \"$(header "User-Agent")\"" >>$LOGFILE
  exit 0
}

send_response_eval () {
  resp="$(echo -e "$1")"
  send_response "$resp"
}

## readloop

if [[ "$1" == "__magic__" ]]; then
  source "$2"

  parse_headers

  content_type "text/plain"
  status_code 200

  respond
else
  echo "launching smash"
  launch $@
fi
